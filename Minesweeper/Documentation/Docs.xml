<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Minesweeper</name>
    </assembly>
    <members>
        <member name="T:Minesweeper.GameMap">
            <summary>
            This class manages the window that the main game is played in 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.numberOfRows">
            <summary>
            The number of rows in the game area
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.numberOfColumns">
            <summary>
            The number of columns in the game area 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.mineSizeInPixels">
            <summary>
            The size of the buttons in pixels.
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.numberOfBombs">
            <summary>
            The number of bombs for the game 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.gameMapWidthInPixels">
            <summary>
            The width of the game area in pixels 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.gameMapHeightInPixels">
            <summary>
            The height of the game area in pixels 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.columnPositionOfMouse">
            <summary>
            Contains the number of the column the mouse is hoovering over  
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.rowPositionOfMouse">
            <summary>
            Contains the number of the row the mouse is hoovering over 
            </summary>
        </member>
        <member name="F:Minesweeper.GameMap.bitmapContainer">
            <summary>
            Contains the object that the game map displays in 
            </summary>
        </member>
        <member name="T:Minesweeper.GameMap.MineSpaceStates">
            <summary>
            Contains the state of each button 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.createMap">
            <summary>
            Handles the creation of the game area 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.initializeMapVarsBeforeBombsCreated">
            <summary>
            Initializes the data that can be initialized before the bombs are placed. 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.initializeMapVarsAfterBombsCreated">
            <summary>
            Displays the number of bombs remaining and the number of safe spaces remaining. 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.drawMap">
            <summary>
            Draws the map 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.MouseMoveInGame(System.Object,System.EventArgs)">
            <summary>
            Heighlights the box under the mouse cursor 
            </summary>
            <param name="sender">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.MineSpaceClicked(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Determines if the right or left mouse button was clicked and calls the appropriate method to handle the event.
            (Either LeftMouseButtonClicked or RightMouseButtonClicked)
            </summary>
            <param name="sender">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            <param name="mouse"></param>
        </member>
        <member name="M:Minesweeper.GameMap.LeftMouseButtonClicked(System.Int32,System.Int32)">
            <summary>
            If the mouse is hovering over a button this function reveals what's underneat of the button
            </summary>
            <param name="column">
            The number of the column that the mouse is hoovering over when the button is clicked
            </param>
            <param name="row">
            The number of the row that the mouse is hoovering over when the button is clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.RevealMineSpace(System.Int32,System.Int32)">
            <summary>
            Removes the button covering the underlying cell either reveals the number lying under the cell, 
            reveals the neighboring cells until a number is found, or ends the game is the button is hiding
            a bomb. 
            </summary>
            <param name="column">
            The number of the column that the mouse is hoovering over 
            </param>
            <param name="row">
            The number of the row that the mouse is hoovering over 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.RightMouseButtonClicked">
            <summary>
            Marks the button as unsafe if the button has not been marked previously or if it is marked as safe before the call
            Marks the button as safe if the button is currently marked as unsafe. 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.ColumnRowInGameArray(System.Int32,System.Int32)">
            <summary>
            Determines if the column and row are actually displayed in the game 
            </summary>
            <param name="column">
            The column that the mouse is hoovering over 
            </param>
            <param name="row">
            The row that the mouse is hoovering over 
            </param>
            <returns>
            True if the column and row are valid, false otherwise 
            </returns>
        </member>
        <member name="M:Minesweeper.GameMap.numberOfTouchingBombs(System.Int32,System.Int32)">
            <summary>
            Returns the number of bombs that are touching the bomb at the row and column position
            </summary>
            <param name="column">
            The column the mouse is hoovering over
            </param>
            <param name="row">
            The row the mouse is hoovering over 
            </param>
            <returns>
            The number of bombs that are touching the bomb at the row and column position
            </returns>
        </member>
        <member name="M:Minesweeper.GameMap.CreateBombMap">
            <summary>
            Distribures the bombs throughout the map 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.EndReveal">
            <summary>
            Shows all of the bombs on the map and opens all of the buttons 
            </summary>
        </member>
        <member name="M:Minesweeper.GameMap.ClickAdjacentSpacesUpFirst(System.Int32,System.Int32)">
            <summary>
            Reveals the cells adjacent to the button pushed by the mouse until it finds numbers. Starting with the upper cell. 
            </summary>
            <param name="column">
            The number of the column that the mouse has just clicked
            </param>
            <param name="row">
            The number of the row that the mouse has just clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.ClickAdjacentSpacesLeftFirst(System.Int32,System.Int32)">
            <summary>
            Reveals the cells adjacent to the button pushed by the mouse until it finds numbers. Starting with the left cell. 
            </summary>
            <param name="column">
            The number of the column that the mouse has just clicked
            </param>
            <param name="row">
            The number of the row that the mouse has just clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.ClickAdjacentSpacesDownFirst(System.Int32,System.Int32)">
            <summary>
            Reveals the cells adjacent to the button pushed by the mouse until it finds numbers. Starting with the lower cell. 
            </summary>
            <param name="column">
            The number of the column that the mouse has just clicked
            </param>
            <param name="row">
            The number of the row that the mouse has just clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.ClickAdjacentSpacesRightFirst(System.Int32,System.Int32)">
            <summary>
            Reveals the cells adjacent to the button pushed by the mouse until it finds numbers. Starting with the right cell. 
            </summary>
            <param name="column">
            The number of the column that the mouse has just clicked
            </param>
            <param name="row">
            The number of the row that the mouse has just clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.ClickAdjacentSpacesGeneric(System.Int32,System.Int32)">
            <summary>
            Reveals the cells adjacent to the button pushed by the mouse until it finds numbers. 
            </summary>
            <param name="column">
            The number of the column that the mouse has just clicked
            </param>
            <param name="row">
            The number of the row that the mouse has just clicked 
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.ExitApplication(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Closes the game 
            </summary>
            <param name="sender">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place. 
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.MenuNewGame(System.Object,System.EventArgs)">
            <summary>
            Called when the player clicks the new game menu option. Provides a dialogue box that lets the user decide
            whether to save the game or not. 
            </summary>
            <param name="sender">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.MenuSaveGame(System.Object,System.EventArgs)">
            <summary>
            Called when the player clicks the save game menu option. Saves the current state of the game 
            </summary>
            <param name="sender">
            Contains information about the object that sent the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.MenuLoadGame(System.Object,System.EventArgs)">
            <summary>
            Called when the player clicks the load game option. Loads the previously saved game. 
            </summary>
            <param name="sender">
            Contains information about the object that sent the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="M:Minesweeper.GameMap.MenuDeleteGame(System.Object,System.EventArgs)">
            <summary>
            Presents a menu that allows the player to delete saved games. 
            </summary>
            <param name="sender">
            Contains information about the object that sent the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="T:Minesweeper.DeleteSave">
            <summary>
            This class is here to enable the user to delete save games through our interface.
            </summary>
        </member>
        <member name="M:Minesweeper.DeleteSave.#ctor(Minesweeper.GameMap,Minesweeper.GameFilesDialog.ActionsAfterDialog)">
            <summary>
            This constructor creates an instance of the DeleteSave Class.
            </summary>
            <param name="sender">This is the object that created this instance</param>
            <param name="actionAfterSave">This represents the action that we should take after we are done deleting games.</param>
        </member>
        <member name="M:Minesweeper.DeleteSave.ButtonClicked">
            <summary>
            This method overwrites the virtual method that the parent has. 
            This method is used delete the currently selected save file.
            </summary>
        </member>
        <member name="T:Minesweeper.DrawMap">
            <summary>
            This is class creates the graphics for the game map. It draws its changes onto a bitmap that is the picture that the user sees as the game.
            </summary>
        </member>
        <member name="M:Minesweeper.DrawMap.#ctor(Minesweeper.GameMap,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is class creates the graphics for the game map. It draws its changes onto a bitmap that is the picture that the user sees as the game.
            </summary>
            <param name="sender">This parameter is the object that created an instance of this class. It is needed so that we can send it the updated bitmap to display it.</param>
            <param name="NumberOfColumns">This parameter is the number of columns that the object that the sender has. This will be used to help us calculate the size of the map as well as for iterating through loops.</param>
            <param name="NumberOfRows">This parameter is the number of rows that the object that the sender has. This will be used to help us calculate the size of the map as well as for iterating through loops.</param>
            <param name="MineSizeInPixels">This parameter is the mine size that the object that the sender has. This will be used to help us calculate the size of the map as well.</param>
        </member>
        <member name="M:Minesweeper.DrawMap.getMapHeight">
            <summary>
            This Method is used to get the map height in pixels
            </summary>
            <returns>This method returns the height of the game map in pixels</returns>
        </member>
        <member name="M:Minesweeper.DrawMap.getMapWidth">
            <summary>
            This Method is used to get the map width in pixels
            </summary>
            <returns>This method returns the width of the game map in pixels</returns>
        </member>
        <member name="M:Minesweeper.DrawMap.InitializeVariables">
            <summary>
            This method initializes the variable used in this class. It also calculates the map width and the map height.
            </summary>
        </member>
        <member name="M:Minesweeper.DrawMap.InitialDraw">
            <summary>
            This method draws a map of all initial mine spaces. It has the diminsions that are sent in to the constructor.
            </summary>
        </member>
        <member name="M:Minesweeper.DrawMap.FillRectangle(System.Int32,System.Int32,System.Drawing.Brush)">
            <summary>
            This method draws a rectangle at the position defined by the position of the columnIndex and rowIndex parameters. It draws the rectangle with the brush that comes in as a parameter.
            </summary>
            <param name="columnIndex">This parameter defines the column location of the rectangle.</param>
            <param name="rowIndex">This parameter defines the row location of the rectangle.</param>
            <param name="brush">This parameter defines the brush to be used to draw the rectangle.</param>
        </member>
        <member name="M:Minesweeper.DrawMap.DrawBitmap(System.Int32,System.Int32,System.Drawing.Bitmap)">
            <summary>
            This method draws a bitmap at the position defined by the position of the columnIndex and rowIndex parameters.
            </summary>
            <param name="columnIndex">This parameter defines the column location to draw the bitmap.</param>
            <param name="rowIndex">This parameter defines the row location to draw the bitmap.</param>
            <param name="bitmap">This parameter defines which bitmap to draw.</param>
        </member>
        <member name="M:Minesweeper.DrawMap.RefreshScreen">
            <summary>
            This method outputs to the screen the updated bitmap inside the bitmap container which is a picture box.
            </summary>
        </member>
        <member name="M:Minesweeper.DrawMap.DrawString(System.String,System.Int32,System.Int32)">
            <summary>
            This method draws a string at the position defined by the position of the columnIndex and rowIndex parameters. It draws it in a predefined font with a black color.
            </summary>
            <param name="outputString"> This parameter defines the string to be displayed to the screen</param>
            <param name="column">This parameter defines the column location to draw the string.</param>
            <param name="row">This parameter defines the row location to draw the string.</param>
        </member>
        <member name="T:Minesweeper.Ending">
            <summary>
            This class is designed to display an ending form that the user can interact with to either play again, retry, or quit the game. 
            </summary>
        </member>
        <member name="M:Minesweeper.Ending.#ctor(Minesweeper.GameMap,System.Int32,System.Int32,System.Int32,System.Int32,Minesweeper.GameMap.MineSpaceStates[0:,0:],System.Boolean[0:,0:])">
            <summary>
            Creates a new ending screen 
            </summary>
            <param name="sender">
            used to give access to Game class variables and data
            </param>
            <param name="TotalNumberOfBombsLeft">
            The total number of bombs remaining in the game
            </param>
            <param name="TotalNumberOfSafeSpacesLeft">
            The total number of safe spaces left in the game 
            </param>
            <param name="NumberOfColumns">
            The number of columns in the game
            </param>
            <param name="NumberOfRows">
            The number of rows in the game 
            </param>
            <param name="StateOfMineSpace">
            An array that contains the states of each space
            </param>
            <param name="ContainsMine">
            An array that contains information about whether a space contains a mine 
            </param>
        </member>
        <member name="M:Minesweeper.Ending.#ctor(Minesweeper.GameMap,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,Minesweeper.GameMap.MineSpaceStates[0:,0:],System.Boolean[0:,0:])">
            <summary>
            Creates a new ending screen 
            </summary>
            <param name="sender">
            used to give access to Game class variables and data
            </param>
            <param name="endedByBomb">
            A flag that tells the function whether the player won or lost 
            </param>
            <param name="TotalNumberOfBombsLeft">
            The total number of bombs remaining in the game 
            </param>
            <param name="TotalNumberOfSafeSpacesLeft">
            The total number of safe spaces left in the game 
            </param>
            <param name="NumberOfColumns">
            The number of columns in the game 
            </param>
            <param name="NumberOfRows">
            The number of rows in the game 
            </param>
            <param name="StateOfMineSpace">
            An array that contains the states of each space
            </param>
            <param name="ContainsMine">
            An array that contains information about whether a space contains a mine
            </param>
        </member>
        <member name="M:Minesweeper.Ending.hitMine">
            <summary>
            Used to determine if the game ended by hitting a bomb 
            </summary>
        </member>
        <member name="M:Minesweeper.Ending.endResult(Minesweeper.GameMap)">
            <summary>
            Determines if the player won or lost and displays the correct form. 
            </summary>
            <param name="m_GameMap">
            The game the player was playing 
            </param>
        </member>
        <member name="T:Minesweeper.Form1">
            <summary>
            This class manages the window that accepts the game specifications from the user
            </summary>
        </member>
        <member name="F:Minesweeper.Form1.game">
            <summary>
            The window that contains the main game area. This class opens the game if it is provided with valid input. 
            </summary>
        </member>
        <member name="M:Minesweeper.Form1.#ctor">
            <summary>
            Initializes the data contained by the class.
            </summary>
        </member>
        <member name="M:Minesweeper.Form1.continueButton_Click_1(System.Object,System.EventArgs)">
            <summary>
            Varifies that the input given to the main window is valid and if it is opens the game window. 
            </summary>
            <param name="sender">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place. 
            </param>
            <param name="e">
            Contains information about the object that send the event.
            Unused by the current implementation of the function but because the 
            function was generated by visual studio it was left in place.
            </param>
        </member>
        <member name="F:Minesweeper.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Minesweeper.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Minesweeper.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Minesweeper.GameFilesDialog">
            <summary>
            Manages a file menu for the player 
            </summary>
        </member>
        <member name="T:Minesweeper.GameFilesDialog.ActionsAfterDialog">
            <summary>
            Contains a value that dictates what actions need to be taken after the dialog is closed 
            </summary>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.#ctor(Minesweeper.GameFilesDialog.ActionsAfterDialog,Minesweeper.GameMap,Minesweeper.SaveTypeDialog,System.String,System.String)">
            <summary>
            Constructs a new files dialog 
            </summary>
            <param name="ActionAfterDialog">
            An enum that dictates the action to be taken after the dialog is over 
            </param>
            <param name="gameMapSender">
            The game map that called the dialog 
            </param>
            <param name="sender">
            The type of action to be taken (save, load, or delete)
            </param>
            <param name="finishString">
            The string to be displayed at the end of the game 
            </param>
            <param name="buttonText">
            The text to be displayed by the button 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.getSaveString">
            <summary>
            Gets the string to be displayed when saved 
            </summary>
            <returns>
            The string to be displayed when saved 
            </returns>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.setDialogDone(System.Boolean)">
            <summary>
            Sets the dialogue to either be done or not done 
            </summary>
            <param name="value">
            The value to set dialogDone to 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.CreateDialog">
            <summary>
            Creates a new dialog 
            </summary>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.SaveGameDialogDone">
            <summary>
            Performs the neccessary actions to be done after the dialog is closed. 
            </summary>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.ExitButtonClicked(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Makes sure the user actually wants to exit if the game is still going and then closes the game. 
            </summary>
            <param name="sender">
            The object that called this function
            </param>
            <param name="e">
            Contains information about the closing event 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.ButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Varifies that the user has entered a correct name for the save file and then saves the name of it  
            </summary>
            <param name="sender">
            The object that called the function
            </param>
            <param name="e">
            Contains information about the event 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.IsLetter(System.Char)">
            <summary>
            Determines if letter is a letter 
            </summary>
            <param name="letter">
            The char to be tested for being a letter 
            </param>
            <returns>
            True if letter is a letter, false otherwise 
            </returns>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.PopulateSaveList">
            <summary>
            Populates the save list 
            </summary>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.SaveListItemSingleClicked(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Populates the selectedGameTextbox with the name of the game to open 
            </summary>
            <param name="sender">
            The object that called this function
            </param>
            <param name="e">
            Contains information about the event that caused this function to be called 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.SaveListItemDoubleClicked(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Prompts the user to make sure they want to overwrite a previous save and then overwrites the save they double clicked 
            </summary>
            <param name="sender">
            Contains information about the object that called this function
            </param>
            <param name="e">
            Contains information about the event that caused this function to be called 
            </param>
        </member>
        <member name="M:Minesweeper.GameFilesDialog.saveStringAlreadyExists">
            <summary>
            Determines whether the inputted name for the save already exists 
            </summary>
            <returns>
            True if the name already exists, false otherwise
            </returns>
        </member>
        <member name="T:Minesweeper.LoadGame">
            <summary>
            Handles the loading of an old file 
            </summary>
        </member>
        <member name="M:Minesweeper.LoadGame.#ctor(Minesweeper.GameMap)">
            <summary>
            Presents the user with a window that allows them to load a game. 
            </summary>
            <param name="sender">
            The game map that called the function
            </param>
        </member>
        <member name="M:Minesweeper.LoadGame.ButtonClicked">
            <summary>
            Loads the previously saved game selected by the user 
            </summary>
        </member>
        <member name="M:Minesweeper.LoadGame.ReadTextFile">
            <summary>
            Reads a text file into an array of strings
            </summary>
            <returns>
            An array of strings that contains the text from the file 
            </returns>
        </member>
        <member name="M:Minesweeper.LoadGame.LoadNewLineText(System.String[],System.Int32)">
            <summary>
            returns a string from an index of an array of strings 
            </summary>
            <param name="text">
            The array of strings to take the text from 
            </param>
            <param name="index">
            The index of the array to return 
            </param>
            <returns>
            The string at text[index]
            </returns>
        </member>
        <member name="M:Minesweeper.LoadGame.LoadIntArrayFromSpaceTextFixedLength(System.String,System.Int32,System.Int32)">
            <summary>
            Parses an array of intes from a string
            </summary>
            <param name="text">
            The string to be parsed 
            </param>
            <param name="numberOfColumns">
            The number of columns in the game 
            </param>
            <param name="numberOfRows">
            The number of rows in the game 
            </param>
            <returns>
            The array of ints parsed from the string 
            </returns>
        </member>
        <member name="M:Minesweeper.LoadGame.LoadEnumArrayFromSpaceTextFixedLength(System.String,System.Int32,System.Int32)">
            <summary>
            Loads the state of each cell from a string 
            </summary>
            <param name="text">
            The string to be parsed 
            </param>
            <param name="numberOfColumns">
            The number of columns in the game 
            </param>
            <param name="numberOfRows">
            The number of rows in the game 
            </param>
            <returns>
            An array of enums that represents the state of each cell 
            </returns>
        </member>
        <member name="M:Minesweeper.LoadGame.LoadBoolArrayFromSpaceTextFixedLength(System.String,System.Int32,System.Int32)">
            <summary>
            Loads an array of bools from a string that represents whether or not each cell contains a mine 
            </summary>
            <param name="text">
            The string to be parsed 
            </param>
            <param name="numberOfColumns">
            The number of columns in the game 
            </param>
            <param name="numberOfRows">
            The number of rows in the game 
            </param>
            <returns>
            An array of bools that represents whether or not each cell contains a mine 
            </returns>
        </member>
        <member name="F:Minesweeper.LoseScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Minesweeper.LoseScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Minesweeper.LoseScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Minesweeper.ObjectController">
            <summary>
            This class is used to create objects.
            </summary>
        </member>
        <member name="M:Minesweeper.ObjectController.createGameMap">
            <summary>
            This method creates an instance of the GameMap class.
            </summary>
        </member>
        <member name="M:Minesweeper.ObjectController.createGameMapFromLoad(System.Int32,System.Int32,System.Boolean[0:,0:],Minesweeper.GameMap.MineSpaceStates[0:,0:])">
            <summary>
            This method creates an instance of the GameMap class from a load.
            </summary>
            <param name="NumberOfColumns">This is the number of columns that the new map will have.</param>
            <param name="NumberOfRows">This is the number of rows that the new map will have.</param>
            <param name="ContainsMine">This is a two diminsional array of bool that describes if there is a mine at the current position of the array. A value of 1 means that the array contains a mine.</param>
            <param name="StateOfMineSpace">This is a two diminsional array of an enum. The enum represents the current state of a mine space that is denoted by the column and row index.</param>
        </member>
        <member name="M:Minesweeper.ObjectController.createSaveGameDialog(Minesweeper.GameMap,Minesweeper.GameFilesDialog.ActionsAfterDialog,System.Int32,System.Int32,Minesweeper.GameMap.MineSpaceStates[0:,0:],System.Boolean[0:,0:])">
            <summary>
            This method creates an instance of the SaveGame class.
            </summary>
            <param name="sender">This is the object that called this method</param>
            <param name="actionAfterSave">This is an enum value that tells the SaveGame instance what it should do when it is done.</param>
            <param name="NumberOfColumns">This value represents how many columns the object that called this method has.</param>
            <param name="NumberOfRows">This value represents how many rows the object that called this method has.</param>
            <param name="StateOfMineSpace">This is a two diminsional array of an enum. The enum represents the current state of a mine space that is denoted by the column and row index.</param>
            <param name="ContainsMine">This is a two diminsional array of bool that describes if there is a mine at the current position of the array. A value of 1 means that the array contains a mine.</param>
        </member>
        <member name="M:Minesweeper.ObjectController.createLoadGameDialog(Minesweeper.GameMap)">
            <summary>
            This method creates an instance of the load game class.
            </summary>
            <param name="sender">This is the object that called this method.</param>
        </member>
        <member name="M:Minesweeper.ObjectController.deleteSaveGameDialog(Minesweeper.GameMap,Minesweeper.GameFilesDialog.ActionsAfterDialog)">
            <summary>
            This method creates an instance of the DeleteSave class.
            </summary>
            <param name="sender">This is the object that called this method.</param>
            <param name="actionAfterSave">This is what the DeleteSave instance should do after it is done.</param>
        </member>
        <member name="M:Minesweeper.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Minesweeper.SaveTypeDialog">
            <summary>
            This class is here to be inherited by the SaveGame, LoadGame, and Delete game class. This class is basically virtual.
            </summary>
        </member>
        <member name="M:Minesweeper.SaveTypeDialog.#ctor">
            <summary>
            This creates an instance of the Save Type Class. This should not be used.
            </summary>
        </member>
        <member name="M:Minesweeper.SaveTypeDialog.ButtonClicked">
            <summary>
            This method is a virtual method that should be overwritten by all the children of this class.
            </summary>
        </member>
        <member name="F:Minesweeper.WinScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Minesweeper.WinScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Minesweeper.WinScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Minesweeper.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.greenflag">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.mine1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.mine2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.redflag">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.retroExplosion">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:Minesweeper.Properties.Resources.won_game">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
    </members>
</doc>
